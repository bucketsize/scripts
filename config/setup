#!/usr/bin/env lua
require "luarocks.loader"
package.path = '/?.lua;' .. package.path

print ("boostrapping minilib ...")
os.execute("minilib/setup")
print ("done.")

local Sh = require('minilib.shell')
local Pr = require('minilib.process')
local Ut = require('minilib.util')

local _HOME = os.getenv("HOME")
local _CFG_DIR = _HOME .. "/cfg"

local config_group = {
    dirs = {
        ["~/.cache"] = {},
        ["~/.theme"] = {},
        ["~/.wlprs"] = {},
        ["~/.local/bin"] = {},
    },
    bins = {
        ["bgfpid"] = {},
        ["ctrl_backlight.sh"] = {},
        ["ctrl_monitor.sh"] = {},
    },
    bspwm = {
        Xresources = {},
        autostart = {},
        bspwm = {},
        sxhkd = {},
        alacritty = {state="noi"}
    },
    openbox = {
        Xresources = {},
        autostart = {},
        openbox = {},
        sxhkd = {},
        alacritty = {state="noi"}
    },
    common = {
        fontconfig = {},
        gtk = {},
        dunst = {},
        firefox = {},
        chromium = {},
        vim = {},
        mpd = {},
        ympd = {state="noi"},
        mpv = {},
        mxctl = {},
        lspd = {},
        tz = {},
        fseer = {state="noi"},
        --conky = {},
        ["sysctl.d"] = {},
        pipewire = {}
    },
    wayland_weston = {
        weston = {},
        foot = {},
        triggerhappy = {}
    }
}

function setup_pcbell()
    Ut:exec([[
        pcnobell=$(grep -Po "^set bell-style none" /etc/inputrc)
        if [ "$pcnobell" = "" ]; then
            echo "set bell-style none" | sudo tee /etc/inputrc
        fi
    ]])
end

function setup_path()
    Ut:exec([[
        if [ "" = "$(grep '\.local\/bin' ~/.bashrc | tr -d '\n')" ]; then
            echo "export PATH=\$HOME/.local/bin:\$PATH" >> ~/.bashrc
        fi
    ]])
end

function setup_dirs()
    for k, v in pairs(config_group.dirs) do
        Sh.mkdir (k)
    end
end

function setup_bins()
    for k, v in pairs(config_group.bins) do
        Sh.ln (
            string.format("~/scripts/%s", k),
            string.format("~/.local/bin/%s", k))
    end
end

function prepare_configs(cfg)
    local subcfg = require("config-global")
    Pr.pipe()
        .add(Sh.find("./"))
        .add(Sh.read())
        .add(Sh.sed(subcfg))
        .add(Sh.write(cfg))
        .run()
    Sh.sh(string.format("cd %s && chmod +x */setup", cfg))
    Sh.sh(string.format("cd %s && chmod +x autostart/my/autostartd", cfg))
end

function setup_configs(cfg, name)
    print("deploying config_group", name)
    for k, v in pairs(config_group[name]) do
        if v.state == "noi" then
            print("> " .. k .. " :noi")
        else
            print("> " .. k)
            Ut:exec(string.format([[
                cd %s && %s/setup
                ]], cfg, k))
        end
    end
    return 0
end

local _cfg_dir = _CFG_DIR
if arg[1] then
	_cfg_dir = arg[1]
end
print("> setup in", _cfg_dir)

-- common
setup_dirs()
setup_bins()
setup_path()
setup_pcbell()
prepare_configs(_cfg_dir)

-- weston
setup_configs(_cfg_dir, "openbox")
setup_configs(_cfg_dir, "common")
