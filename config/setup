#!/usr/bin/env lua
require "luarocks.loader"
package.path = '/?.lua;' .. package.path

print ("boostrapping minilib ...")
os.execute("minilib/setup")
print ("done.")

local Sh = require('minilib.shell')
local Pr = require('minilib.process')
local Ut = require('minilib.util')

local _HOME = os.getenv("HOME")
local _CFG_DIR = _HOME .. "/cfg"

local config_group = {
    dirs = {
        ["~/.cache"] = {},
        ["~/.theme"] = {},
        ["~/.wlprs"] = {},
        ["~/.local/bin"] = {},
    },
    bins = {
        ["bgfpid"] = {},
        ["ctrl_backlight.sh"] = {},
        ["ctrl_monitor.sh"] = {},
    },
    bspwm = {
        Xresources = {},
        autostart = {},
        bspwm = {},
        sxhkd = {},
    },
    openbox = {
        Xresources = {},
        autostart = {},
        openbox = {},
        triggerhappy = {}
    },
    xmonad = {
        Xresources = {},
        xmonad = {state="noi"},
        xmobar = {},
        triggerhappy = {}
    },
    common = {
        fontconfig = {},
        gtk = {},
		qt5ct = {},
        dunst = {},
        firefox = {},
        chromium = {},
		qutebrowser = {},
        vim = {},
        nvim = {},
        mpd = {},
        ympd = {state="noi"},
        mpv = {},
        mxctl = {},
        lspd = {},
        tz = {},
        fseer = {state="noi"},
        conky = {},
        ["sysctl.d"] = {},
        pipewire = {},
		["qterminal.org"] = {},
        -- alacritty = {state="noi"},
    },
    wayland_weston = {
        weston = {},
        foot = {},
        triggerhappy = {}
    }
}

function setup_pcbell()
    Ut:exec([[
        pcnobell=$(grep -Po "^set bell-style none" /etc/inputrc)
        if [ "$pcnobell" = "" ]; then
            echo "set bell-style none" | sudo tee /etc/inputrc
        fi
    ]])
end

function setup_path()
    Ut:exec([[
        if [ "" = "$(grep '\.local\/bin' ~/.bashrc | tr -d '\n')" ]; then
            echo "export PATH=\$HOME/.local/bin:\$PATH" >> ~/.bashrc
        fi
    ]])
end

function setup_dirs()
    for k, v in pairs(config_group.dirs) do
        Sh.mkdir (k)
    end
end

function setup_bins()
    for k, v in pairs(config_group.bins) do
        Sh.ln (
            string.format("~/scripts/%s", k),
            string.format("~/.local/bin/%s", k))
    end
end
function seek_and_destory(path, subhbs)
    Pr.pipe()
        .add(Sh.find(path, "*.t"))
        .add(Sh.read())
        .add(Sh.sed(subhbs))
		.add(function(fline)
			if fline == nil then return nil end
			fline.path = fline.path:gsub("%.t", "")
			-- print("sad>", fline.path)
			return fline
		end)
        .add(Sh.write("./"))
        .run()
end
function prepare_config(name)
    local subcfg = require("config-global")
	local subhbs = {}
	for i,v in pairs(subcfg) do
		subhbs["{"..i.."}"] = v
	end
	seek_and_destory(string.format("%s/", name), subhbs)
end
function prepare_configs()
    local subcfg = require("config-global")
	local subhbs = {}
	for i,v in pairs(subcfg) do
		subhbs["{"..i.."}"] = v
	end
	seek_and_destory("./", subhbs)
end
function setup_config(name)
	print("deploying config", name)
	Sh.sh(string.format([[%s/setup]], name))
    return 0
end
function setup_configs(name)
    print("deploying config_group", name)
    for k, v in pairs(config_group[name]) do
        if v.state == "noi" then
            print("> " .. k .. " :noi")
        else
            print("> " .. k)
            Sh.sh(string.format([[%s/setup]], k))
        end
    end
    return 0
end

if arg[1] == nil then
	print("> *")
	-- common
	setup_dirs()
	setup_bins()
	setup_path()
	setup_pcbell()
	prepare_configs()
	-- groups
	setup_configs("openbox")
	setup_configs("xmonad")
	setup_configs("common")
else
	print("> " .. arg[1])
	-- common
	setup_dirs()
	setup_bins()
	setup_path()
	setup_pcbell()
	prepare_config(arg[1])
	setup_config(arg[1])
end
