#!/usr/bin/env lua
require "luarocks.loader"
package.path = '/?.lua;' .. package.path

local Sh = require('minilib.shell')
local Pr = require('minilib.process')
local Ut = require('minilib.util')

local dirs = {
    ["~/.cache"] = {},
    ["~/.theme"] = {},
    ["~/.wlprs"] = {},
    ["~/.local/bin"] = {},
}

local bins = {
    ["bgfpid"] = {},
    ["ctrl_backlight.sh"] = {},
    ["ctrl_monitor.sh"] = {},
}

local cfg = "/var/tmp/cfg"
local config_group = {
    bspwm = {
        Xresources = {},
        autostart = {},
        bspwm = {},
        sxhkd = {},
        alacritty = {state="noi"}
    },
    openbox = {
        Xresources = {},
        autostart = {},
        openbox = {},
        sxhkd = {},
        alacritty = {state="noi"}
    },
    common = {
        fontconfig = {},
        gtk = {},
        dunst = {},
        firefox = {},
        chromium = {},
        vim = {},
        mpd = {},
        ympd = {state="noi"},
        mpv = {},
        mxctl = {},
        lspd = {},
        tz = {},
        fseer = {},
        ["sysctl.d"] = {},
        pipewire = {}
    },
    wayland_weston = {
        weston = {},
        foot = {},
        triggerhappy = {}
    }
}

function setup_pcbell()
    Ut:exec([[
        pcnobell=$(grep -Po "^set bell-style none" /etc/inputrc)
        if [ "$pcnobell" = "" ]; then
            echo "set bell-style none" | sudo tee /etc/inputrc
        fi
    ]])
end

function setup_path()
    Ut:exec([[
        if [ "" = "$(grep '\.local\/bin' ~/.bashrc | tr -d '\n')" ]; then
            echo "export PATH=\$HOME/.local/bin:\$PATH" >> ~/.bashrc
        fi
    ]])
end

function setup_dirs()
    Ut:map(function(k, v)
        Sh.mkdir (k)
    end, dirs)
end

function setup_bins()
    Ut:map(function(k, v)
        Sh.ln (
            string.format("~/scripts/%s", k),
            string.format("~/.local/bin/%s", k))
    end, bins)
end

function prepare_configs()
    local subcfg = require("config-global")
    Pr.pipe()
        .add(Sh.find("./"))
        .add(Sh.read())
        .add(Sh.sed(subcfg))
        .add(Sh.write(cfg))
        .run()
    Sh.assert_exec(string.format("cd %s && chmod +x */setup", cfg))
end

function setup_configs(name)
    print("deploying config_group", name)
    for k, v in pairs(config_group[name]) do
        if v.state == "noi" then
            print("> " .. k .. " :noi")
        else
            print("> " .. k)
            Ut:exec(string.format([[
                cd %s && %s/setup
                ]], cfg, k))
        end
    end
    return 0
end

-- common
setup_dirs()
setup_bins()
setup_path()
prepare_configs()

-- weston
setup_configs("wayland_weston")
setup_configs("common")
